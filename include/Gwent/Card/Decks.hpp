#pragma once

#include <R-Engine/Types.hpp>

#include <array>
#include <vector>

// clang-format off

namespace r {

namespace gwent {

enum class DeckFaction {
    Neutral,
    Special,
    Weather,
    Realms,
    Nilfgaard,
    Monsters,
    Scoiatael,
    Skellige
};

struct CardInDeck final {
    u32 card_id;
    u32 count;
};

struct PremadeDeck final {
    const DeckFaction faction;
    const u32 leader_id;
    const std::vector<CardInDeck> cards;
};

static const std::array<PremadeDeck, 10> g_premade_decks{
    PremadeDeck{DeckFaction::Realms, 24,
                {{5, 1}, {1, 3}, {2, 1}, {3, 1}, {8, 1}, {33, 1}, {34, 1}, {39, 1}, {51, 1}, {29, 2}, {12, 1},
                 {14, 1}, {15, 1}, {27, 1}, {17, 1}, {45, 1}, {54, 1}, {55, 1}, {30, 3}, {32, 1}, {41, 1},
                 {28, 3}, {19, 3}, {47, 1}, {6, 1}, {18, 1}, {49, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Realms, 24,
                {{5, 1}, {1, 3}, {2, 1}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {33, 1}, {34, 1}, {39, 1},
                 {51, 1}, {29, 2}, {12, 1}, {14, 1}, {15, 1}, {27, 1}, {17, 1}, {45, 1}, {54, 1}, {55, 1},
                 {30, 3}, {32, 1}, {41, 1}, {28, 3}, {19, 3}, {47, 1}, {6, 1}, {18, 1}, {49, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Nilfgaard, 59,
                {{5, 1}, {1, 3}, {10, 1}, {2, 1}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {63, 1}, {64, 1},
                 {70, 1}, {73, 1}, {75, 1}, {84, 1}, {81, 1}, {14, 1}, {15, 1}, {17, 1}, {90, 1}, {91, 1},
                 {19, 3}, {88, 1}, {71, 4}, {6, 1}, {18, 1}, {67, 1}, {68, 1}, {0, 1}, {83, 1}}},
    PremadeDeck{DeckFaction::Nilfgaard, 58,
                {{5, 1}, {1, 3}, {10, 2}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {63, 1}, {64, 1}, {70, 1},
                 {73, 1}, {75, 1}, {14, 1}, {15, 1}, {62, 1}, {65, 1}, {69, 1}, {17, 1}, {13, 1}, {90, 1},
                 {91, 1}, {88, 1}, {71, 4}, {6, 1}, {67, 1}, {68, 1}, {20, 1}, {0, 1}, {83, 1}}},
    PremadeDeck{DeckFaction::Monsters, 93,
                {{5, 1}, {1, 3}, {10, 1}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {124, 1}, {125, 1}, {138, 1},
                 {14, 1}, {15, 1}, {101, 1}, {105, 1}, {106, 1}, {107, 1}, {17, 1}, {135, 1}, {98, 1}, {99, 1},
                 {100, 1}, {102, 1}, {19, 3}, {131, 1}, {132, 1}, {133, 1}, {134, 1}, {6, 1}, {18, 1},
                 {127, 1}, {128, 1}, {129, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Monsters, 94,
                {{5, 1}, {1, 1}, {10, 3}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {125, 1}, {14, 1}, {15, 1},
                 {101, 1}, {105, 1}, {106, 1}, {107, 1}, {17, 1}, {135, 1}, {98, 1}, {99, 1}, {100, 1}, {19, 3},
                 {131, 1}, {132, 1}, {133, 1}, {134, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Scoiatael, 141,
                {{5, 1}, {1, 3}, {10, 1}, {2, 1}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {167, 1}, {173, 1},
                 {213, 1}, {14, 1}, {15, 1}, {148, 1}, {17, 1}, {162, 1}, {163, 1}, {164, 1}, {19, 3},
                 {144, 1}, {151, 1}, {152, 1}, {153, 1}, {6, 1}, {18, 1}, {159, 1}, {160, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Scoiatael, 143,
                {{5, 1}, {1, 3}, {10, 1}, {2, 1}, {4, 1}, {9, 1}, {11, 1}, {3, 1}, {8, 1}, {167, 1}, {173, 1},
                 {213, 1}, {14, 1}, {15, 1}, {148, 1}, {149, 1}, {150, 1}, {158, 1}, {17, 1}, {162, 1},
                 {163, 1}, {164, 1}, {19, 3}, {6, 1}, {18, 1}, {20, 1}, {159, 1}, {160, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Skellige, 211,
                {{5, 1}, {202, 1}, {10, 1}, {2, 1}, {204, 1}, {11, 1}, {3, 1}, {8, 1}, {203, 1}, {184, 1},
                 {195, 1}, {14, 1}, {15, 1}, {192, 3}, {186, 1}, {17, 1}, {187, 1}, {188, 1}, {189, 1},
                 {200, 3}, {182, 1}, {6, 1}, {210, 3}, {199, 1}, {0, 1}}},
    PremadeDeck{DeckFaction::Skellige, 211,
                {{5, 1}, {1, 2}, {3, 1}, {8, 1}, {203, 1}, {184, 1}, {14, 1}, {192, 3}, {186, 1}, {17, 1},
                 {209, 2}, {187, 1}, {188, 1}, {189, 1}, {19, 3}, {200, 3}, {182, 1}, {0, 1}}}
};

static constexpr inline PremadeDeck find_deck(const DeckFaction faction, const u32 leader) noexcept
{
    for (const auto& deck : g_premade_decks) {
        if (deck.faction == faction && deck.leader_id == leader) {
            return deck;
        }
    }
    return PremadeDeck{DeckFaction::Neutral, 0, {}};
}

}//namespace gwent

}//namespace r
